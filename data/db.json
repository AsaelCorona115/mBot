{

"mBotLessons":[
  {
    "background": "https://color-hex.org/colors/061377.png",
    "course" : "mBot",
    "lessonNumber": "7",
    "lessonTitle": "Follow the line",
    "lessonDescription":
      "Now that we're starting to feel more comfortable using sensors, we will learn how to use the line follower, a sensor that is a lttle bit more complicated but one of the most useful sensors to tell the mBot how to move.",
    "lessonPresentation":"Now that we have dominated a few components and sensors is time to start teaching the mBot how to move. One of the most useful components to teach the mBot to move in a certain way is to use the line follower module included at the bottom which detects if the mBot is on top of a line, or if it has gone left or right. In this lesson new programmers will use multiple conditionals for the first time, and practicing their skills involving loops.",
    "lessonObjectives": ["The mBot shall detect a path marked by a dark line.", "The mBot shall move forward along the path.", "The mBot shall turn as needed to stay on the path."
      ,"The mBot shall execute a strategy to find the path if it strays off of the path."],
    "lessonRequirements": ["line_follower"],
    "lessonAnalysis":"The way the line follower works is by detecting differences in light intensity between the path to follow and the rest of the surface. Ideally, the path and the surface will have a lot of contrast to make it easier for the line-follower sensor to detect. In the mBot the line-follower sensor has two pairs of sensors that emit and receive infrared light. This design makes it easy to detect if the mBot is on the path or if it is going off it. Make sure you watch the video to see the table that includes the values obtained from the two pairs of sensors. Using these values, it is easy to determine if the mBot needs to turn left or right in order to stay on the line: if both sensors are on the line move forward (value 0); if the right sensor is off (value 1), turn left slightly; if the left sensor is off, turn right (value 2). Nevertheless we will have to come up with a strategy for the mBot to find the path if both sensors are off. In this case we will program the mBot to back up until it finds its path again. ",
    "lessonDesign":"lineFollower_flowchart.png",
    "codeAlong":"https://www.youtube.com/embed/gxjQ19Q2rMI",
    "lessonFiles": ["line_follower.png"],
    "key": "1g"
  },
  {
    "background": "https://color-hex.org/colors/061377.png",
    "course" : "mBot",
    "lessonNumber": "8",
    "lessonTitle": "Traffic Simulation",
    "lessonDescription":
      "You know how to use the line follower, you know how to use the ultrasonic sensor, and you can command the LED lights and speakers. But can you do them all in one program? Well of course, here you'll learn how to combine most of the elements we've learned in the previous lessons to simulate the behavior of a driver.",
    "lessonPresentation": "Starting this lesson, we will begin to combine elements from previous lessons to create programs that are slightly more involved. In this first example we will simulate the behavior of a person driving a car. We will program the mBot to follow a path using the line follower all while its able to respond to an object in its path and a crosswalk (represented by a missing section in the path). While doing this lesson, we will review how to use  multiple components of the mBot from  previous lessons and implement programming concepts such as loops, and multiple conditionals. ",
    "lessonObjectives": ["The mBot will be able follow a path using the line-follower.","The mBot will be able to detect if there is an object in the path using the ultrasonic sensor and wait until the object is removed.", "The mBot will briefly pause if there is a crosswalk (represented by a missing section in the path), turn on its LED lights to signal a stop and after a few seconds it will be able to continue and find its path again to continue with the circuit."],
    "lessonRequirements": ["led","line_follower","ultrasonic"],
    "lessonAnalysis": "To complete this lesson, we will have to combine the knowledge acquired from previous lessons. We will use the code learned from the line follower and adapt it to respond to different events that could interrupt its course such as an object in its way and a crosswalk. Using what we know from using the ultrasonic sensor, we will program the mBot to detect objects while its moving and stop if there is something in its way. Using what we know from the values of the line follower we will adapt the original line follower code to react to a crosswalk that is represented in our circuit by a missing part in the path. ",
    "lessonDesign":"trafficSimulation_flowchart.png",
    "codeAlong":"https://www.youtube.com/embed/0KxNMLLLSRU",
    "lessonFiles": ["trafficSimulation_code.png"],
    "key": "1i"
  },
  {
    "background": "https://color-hex.org/colors/061377.png",
    "course" : "mBot",
    "lessonNumber": "9",
    "lessonTitle": "Self Parking",
    "lessonDescription":
      "One more step! This program builds on top of the traffic simulation. Now that the mBot knows how to simulate like its driving, it is time to show it how to park. In this new program we make use of all the elements from the last program to teach the mBot a strategy on how to find a parking spot.",
    "lessonPresentation":"After programming the mBot how to 'drive' we are going to implement a strategy that shows the mBot 'how to find a parking spot and park'. This lesson builds on top of the code from last lesson and uses the same components to figure out how to find a parking spot using the ultrasonic sensor and how to react to find a parking spot.",
    "lessonObjectives": ["The mBot will be able follow a path using the line-follower.","The mBot will be able to detect if there is an object in the path using the ultrasonic sensor and wait until the object is removed.", "The mBot will interpret a missing section in the path to begin the 'finding parking spot strategy'", "The mBot will check right side for a parking spot, then left and if none is available, it will move forward. It will park in the first available spot", "If there is no available spot, the mBot will continue the circuit infinitely until there is a spot available"],
    "lessonRequirements": ["led","line_follower","ultrasonic"],
    "lessonAnalysis":"Since this program is adding features to the Traffic Simulation program, most of the code for the line follower and object detection system has been written already. In this program we will implement a strategy to find an available parking spot in which the mBot will check for the right spot (Figure 17:B), then the left spot (Figure 17:C) and if none is available it will continue through the circuit until a spot becomes available (Figure 17:D, E). To implement the strategy to find an available parking spot it will require some engineering and trial and error testing to determine the amount of voltage over the period of time required to turn as accurately as possible since it is required for the mBot to turn 90 degrees to use the ultrasonic sensor that is located at the front of the robot. This number however can change as well depending on the charge of the batteries that are being used on the mBot and minor adjustments might be needed for the execution of the program. Once this number has been calculated we can use it to calculate the voltage per time needed to turn 180 degrees if the first parking spot is not available and repeat the 90 degrees calculations to return the mBot to its original path. ",
    "lessonDesign":"selfParkingFlowChart.png",
    "codeAlong":"https://www.youtube.com/embed/tk8J2LJx4Js",
    "lessonFiles": ["selfParking_code1.png", "selfParking_code2.png"],
    "key": "1j"
  }
],
"AutomationLessons":[
    {
      "course" : "Automation",
      "lessonNumber": "1",
      "lessonTitle": "My first automation lesson!",
      "lessonDescription":
        "Test lesson for automation",
      "lessonObjectives": ["No objectives so far"],
      "lessonRequirements": [],
      "lessonAnalysis": "EZ",
      "lessonDesign": "blinking_lights.png",
      "codeAlong": "https://www.youtube.com/embed/0KxNMLLLSRU",
      "lessonFiles":["blinking_lights_code_image.png"],
      "key": "1a"
    }
]  
}